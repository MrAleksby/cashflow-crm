// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–Ω—è—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
import { clientService } from '../services/clientService';
import { transactionService } from '../services/transactionService';

export async function fixAllClientsBalance() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clients = await clientService.getAllClients();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.length}`);
    
    let fixed = 0;
    let errors = 0;
    
    for (const client of clients) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        const transactions = await transactionService.getClientTransactions(client.id);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        let correctBalance = 0;
        
        for (const transaction of transactions) {
          if (transaction.type === 'income' && transaction.classesCount) {
            // –ü–æ–∫—É–ø–∫–∞ –∑–∞–Ω—è—Ç–∏–π - –ø—Ä–∏–±–∞–≤–ª—è–µ–º
            correctBalance += transaction.classesCount;
          } else if (transaction.type === 'expense') {
            // –ü–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è - –≤—ã—á–∏—Ç–∞–µ–º 1
            correctBalance -= 1;
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        if (client.classesRemaining !== correctBalance) {
          console.log(`üîß –ö–ª–∏–µ–Ω—Ç ${client.phoneNumber}: –±—ã–ª–æ ${client.classesRemaining}, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${correctBalance}`);
          await clientService.updateClassesRemaining(client.id, correctBalance);
          fixed++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ ${client.phoneNumber}:`, error);
        errors++;
      }
    }
    
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixed}, –û—à–∏–±–æ–∫: ${errors}, –í—Å–µ–≥–æ: ${clients.length}`);
    
    return { fixed, errors, total: clients.length };
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
export async function fixClientBalance(clientId: string) {
  try {
    const client = await clientService.getClientById(clientId);
    if (!client) {
      throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const transactions = await transactionService.getClientTransactions(clientId);
    
    let correctBalance = 0;
    
    for (const transaction of transactions) {
      if (transaction.type === 'income' && transaction.classesCount) {
        correctBalance += transaction.classesCount;
      } else if (transaction.type === 'expense') {
        correctBalance -= 1;
      }
    }
    
    console.log(`–ö–ª–∏–µ–Ω—Ç ${client.phoneNumber}: –±—ã–ª–æ ${client.classesRemaining}, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${correctBalance}`);
    
    await clientService.updateClassesRemaining(clientId, correctBalance);
    
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
    return { old: client.classesRemaining, new: correctBalance };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    throw error;
  }
}

